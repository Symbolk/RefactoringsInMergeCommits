-- MySQL Script generated by MySQL Workbench
-- Thu 12 Jul 2018 03:38:53 PM MDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema refactoring_analysis
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema refactoring_analysis
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `refactoring_analysis` DEFAULT CHARACTER SET utf8 ;
USE `refactoring_analysis` ;

-- -----------------------------------------------------
-- Table `refactoring_analysis`.`project`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`project` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `url` VARCHAR(2000) NULL,
  `name` VARCHAR(100) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`merge_commit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_commit` (
  `commit_hash` CHAR(40) NOT NULL,
  `common_ancestor_hash` CHAR(40) NULL,
  `has_conflict` TINYINT(1) NULL,
  `project` INT NOT NULL,
  PRIMARY KEY (`commit_hash`),
  INDEX `fk_merge_commit_project_idx` (`project` ASC),
  CONSTRAINT `fk_merge_commit_project`
    FOREIGN KEY (`project`)
    REFERENCES `refactoring_analysis`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`merge_parent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_parent` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `commit_hash` CHAR(40) NOT NULL,
  `merge_commit` CHAR(40) NOT NULL,
  INDEX `fk_merge_child_merge_commit1_idx` (`merge_commit` ASC),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_merge_child_merge_commit1`
    FOREIGN KEY (`merge_commit`)
    REFERENCES `refactoring_analysis`.`merge_commit` (`commit_hash`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`refactoring_commit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`refactoring_commit` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `commit_hash` CHAR(40) NULL,
  `refactoring_type` VARCHAR(100) NULL,
  `refactoring_detail` VARCHAR(1000) NULL,
  `merge_parent` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_refactoring_commit_merge_child1_idx` (`merge_parent` ASC),
  CONSTRAINT `fk_refactoring_commit_merge_child1`
    FOREIGN KEY (`merge_parent`)
    REFERENCES `refactoring_analysis`.`merge_parent` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `refactoring_analysis` ;

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`project_refactoring`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`project_refactoring` (`project_id` INT, `project` INT, `merge_commits` INT, `with_refactoring` INT, `non_refactoring` INT, `conflicting` INT, `conflicting_with_refactoring` INT, `conflicting_without_refactoring` INT, `non_conflicting` INT, `non_conflicting_with_refactoring` INT, `non_conflicting_without_refactoring` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`merge_commit_refactoring`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_commit_refactoring` (`merge_commit` INT, `project` INT, `has_conflict` INT, `refactorings_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`merge_parent_refactoring`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_parent_refactoring` (`merge_parent_id` INT, `merge_commit` INT, `refactorings_count` INT);

-- -----------------------------------------------------
-- View `refactoring_analysis`.`project_refactoring`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`project_refactoring`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`project_refactoring` AS
    SELECT 
        `refactoring_analysis`.`project`.`id` AS `project_id`,
        `refactoring_analysis`.`project`.`name` AS `project`,
        COUNT(0) AS `merge_commits`,
        SUM(IF((`merge_commit_refactoring`.`refactorings_count` > 0),
            1,
            0)) AS `with_refactoring`,
        SUM(IF((`merge_commit_refactoring`.`refactorings_count` = 0),
            1,
            0)) AS `non_refactoring`,
        SUM(`merge_commit_refactoring`.`has_conflict`) AS `conflicting`,
        SUM(IF(((`merge_commit_refactoring`.`has_conflict` = 1)
                AND (`merge_commit_refactoring`.`refactorings_count` > 0)),
            1,
            0)) AS `conflicting_with_refactoring`,
        SUM(IF(((`merge_commit_refactoring`.`has_conflict` = 1)
                AND (`merge_commit_refactoring`.`refactorings_count` = 0)),
            1,
            0)) AS `conflicting_without_refactoring`,
        SUM(IF((`merge_commit_refactoring`.`has_conflict` = 0),
            1,
            0)) AS `non_conflicting`,
        SUM(IF(((`merge_commit_refactoring`.`has_conflict` = 0)
                AND (`merge_commit_refactoring`.`refactorings_count` > 0)),
            1,
            0)) AS `non_conflicting_with_refactoring`,
        SUM(IF(((`merge_commit_refactoring`.`has_conflict` = 0)
                AND (`merge_commit_refactoring`.`refactorings_count` = 0)),
            1,
            0)) AS `non_conflicting_without_refactoring`
    FROM
        (`refactoring_analysis`.`merge_commit_refactoring`
        JOIN `refactoring_analysis`.`project`)
    WHERE
        (`refactoring_analysis`.`project`.`id` = `merge_commit_refactoring`.`project`)
    GROUP BY `refactoring_analysis`.`project`.`id`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`merge_commit_refactoring`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`merge_commit_refactoring`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`merge_commit_refactoring` AS
    SELECT 
        `refactoring_analysis`.`merge_commit`.`commit_hash` AS `merge_commit`,
        `refactoring_analysis`.`merge_commit`.`project` AS `project`,
        `refactoring_analysis`.`merge_commit`.`has_conflict` AS `has_conflict`,
        SUM(`merge_parent_refactoring`.`refactorings_count`) AS `refactorings_count`
    FROM
        (`refactoring_analysis`.`merge_commit`
        LEFT JOIN `refactoring_analysis`.`merge_parent_refactoring` ON ((`refactoring_analysis`.`merge_commit`.`commit_hash` = `merge_parent_refactoring`.`merge_commit`)))
    GROUP BY `refactoring_analysis`.`merge_commit`.`commit_hash`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`merge_parent_refactoring`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`merge_parent_refactoring`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`merge_parent_refactoring` AS
    SELECT 
        `refactoring_analysis`.`merge_parent`.`id` AS `merge_parent_id`,
        `refactoring_analysis`.`merge_parent`.`merge_commit` AS `merge_commit`,
        SUM(IF((`refactoring_analysis`.`refactoring_commit`.`id` IS NOT NULL),
            1,
            0)) AS `refactorings_count`
    FROM
        (`refactoring_analysis`.`merge_parent`
        LEFT JOIN `refactoring_analysis`.`refactoring_commit` ON ((`refactoring_analysis`.`merge_parent`.`id` = `refactoring_analysis`.`refactoring_commit`.`merge_parent`)))
    GROUP BY `refactoring_analysis`.`merge_parent`.`id`;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
