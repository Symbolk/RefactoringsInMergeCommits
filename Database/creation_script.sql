-- MySQL Script generated by MySQL Workbench
-- Mon 30 Jul 2018 03:04:05 PM MDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema refactoring_analysis
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema refactoring_analysis
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `refactoring_analysis` DEFAULT CHARACTER SET utf8 ;
USE `refactoring_analysis` ;

-- -----------------------------------------------------
-- Table `refactoring_analysis`.`project`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`project` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `url` VARCHAR(2000) NULL,
  `name` VARCHAR(100) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`merge_commit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_commit` (
  `commit_hash` CHAR(40) NOT NULL,
  `common_ancestor_hash` CHAR(40) NULL,
  `has_conflict` TINYINT(1) NULL,
  `project` INT NOT NULL,
  PRIMARY KEY (`commit_hash`),
  INDEX `fk_merge_commit_project_idx` (`project` ASC),
  CONSTRAINT `fk_merge_commit_project`
    FOREIGN KEY (`project`)
    REFERENCES `refactoring_analysis`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`merge_parent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_parent` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `commit_hash` CHAR(40) NOT NULL,
  `merge_commit` CHAR(40) NOT NULL,
  INDEX `fk_merge_child_merge_commit1_idx` (`merge_commit` ASC),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_merge_child_merge_commit1`
    FOREIGN KEY (`merge_commit`)
    REFERENCES `refactoring_analysis`.`merge_commit` (`commit_hash`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`refactoring_commit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`refactoring_commit` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `commit_hash` CHAR(40) NULL,
  `merge_parent` INT NULL,
  `refactoring_type` VARCHAR(100) NULL,
  `refactoring_detail` VARCHAR(1000) NULL,
  `source_class` VARCHAR(1000) NULL,
  `destination_class` VARCHAR(1000) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_refactoring_commit_merge_child1_idx` (`merge_parent` ASC),
  CONSTRAINT `fk_refactoring_commit_merge_child1`
    FOREIGN KEY (`merge_parent`)
    REFERENCES `refactoring_analysis`.`merge_parent` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_analysis`.`conflicting_file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`conflicting_file` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `merge_commit` CHAR(40) NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  `path` VARCHAR(1000) NOT NULL,
  `package` VARCHAR(1000) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_conflicting_file_1_idx` (`merge_commit` ASC),
  CONSTRAINT `fk_conflicting_file_1`
    FOREIGN KEY (`merge_commit`)
    REFERENCES `refactoring_analysis`.`merge_commit` (`commit_hash`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `refactoring_analysis` ;

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`project_refactoring`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`project_refactoring` (`project_id` INT, `project` INT, `merge_commits` INT, `with_refactoring` INT, `non_refactoring` INT, `conflicting` INT, `conflicting_with_refactoring` INT, `conflicting_without_refactoring` INT, `non_conflicting` INT, `non_conflicting_with_refactoring` INT, `non_conflicting_without_refactoring` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`merge_commit_augmented`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_commit_augmented` (`commit_hash` INT, `project` INT, `has_conflict` INT, `has_java_conflict` INT, `parents_with_refactoring_in_java_conflict` INT, `refactorings_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`merge_parent_refactoring`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`merge_parent_refactoring` (`merge_parent_id` INT, `merge_commit` INT, `refactorings_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`all_refactorings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`all_refactorings` (`project_name` INT, `project_url` INT, `merge_commit_hash` INT, `merge_parent_hash` INT, `refactoring_commit_hash` INT, `refactoring_type` INT, `refactoring_detail` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`conflicting_file_augmented`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`conflicting_file_augmented` (`id` INT, `merge_commit` INT, `type` INT, `path` INT, `package` INT, `class` INT);

-- -----------------------------------------------------
-- Placeholder table for view `refactoring_analysis`.`project_stats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `refactoring_analysis`.`project_stats` (`name` INT, `merge_commits` INT, `with_refactorings` INT, `with_java_conflict` INT, `with_refactorings_in_conflicting_files` INT, `with_refactorings_in_both_parents_of_conflicting_files` INT);

-- -----------------------------------------------------
-- function commit_url
-- -----------------------------------------------------

DELIMITER $$
USE `refactoring_analysis`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `commit_url`(commit_hash char(40), project_url varchar(1000)) RETURNS varchar(1000) CHARSET utf8
BEGIN
RETURN CONCAT("[" , substring(commit_hash, 1, 7) , "](", project_url, "/commit/", commit_hash, ")");
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`project_refactoring`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`project_refactoring`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`project_refactoring` AS
    SELECT 
        `refactoring_analysis`.`project`.`id` AS `project_id`,
        `refactoring_analysis`.`project`.`name` AS `project`,
        COUNT(0) AS `merge_commits`,
        SUM(IF((`refactoring_analysis`.`merge_commit_refactoring`.`refactorings_count` > 0),
            1,
            0)) AS `with_refactoring`,
        SUM(IF((`refactoring_analysis`.`merge_commit_refactoring`.`refactorings_count` = 0),
            1,
            0)) AS `non_refactoring`,
        SUM(`refactoring_analysis`.`merge_commit_refactoring`.`has_conflict`) AS `conflicting`,
        SUM(IF(((`refactoring_analysis`.`merge_commit_refactoring`.`has_conflict` = 1)
                AND (`refactoring_analysis`.`merge_commit_refactoring`.`refactorings_count` > 0)),
            1,
            0)) AS `conflicting_with_refactoring`,
        SUM(IF(((`refactoring_analysis`.`merge_commit_refactoring`.`has_conflict` = 1)
                AND (`refactoring_analysis`.`merge_commit_refactoring`.`refactorings_count` = 0)),
            1,
            0)) AS `conflicting_without_refactoring`,
        SUM(IF((`refactoring_analysis`.`merge_commit_refactoring`.`has_conflict` = 0),
            1,
            0)) AS `non_conflicting`,
        SUM(IF(((`refactoring_analysis`.`merge_commit_refactoring`.`has_conflict` = 0)
                AND (`refactoring_analysis`.`merge_commit_refactoring`.`refactorings_count` > 0)),
            1,
            0)) AS `non_conflicting_with_refactoring`,
        SUM(IF(((`refactoring_analysis`.`merge_commit_refactoring`.`has_conflict` = 0)
                AND (`refactoring_analysis`.`merge_commit_refactoring`.`refactorings_count` = 0)),
            1,
            0)) AS `non_conflicting_without_refactoring`
    FROM
        (`refactoring_analysis`.`merge_commit_refactoring`
        JOIN `refactoring_analysis`.`project`)
    WHERE
        (`refactoring_analysis`.`project`.`id` = `refactoring_analysis`.`merge_commit_refactoring`.`project`)
    GROUP BY `refactoring_analysis`.`project`.`id`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`merge_commit_augmented`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`merge_commit_augmented`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`merge_commit_augmented` AS
    SELECT 
        `refactoring_analysis`.`merge_commit`.`commit_hash` AS `commit_hash`,
        `refactoring_analysis`.`project`.`name` AS `project`,
        `refactoring_analysis`.`merge_commit`.`has_conflict` AS `has_conflict`,
        EXISTS( SELECT 
                1
            FROM
                `refactoring_analysis`.`conflicting_file`
            WHERE
                (`refactoring_analysis`.`conflicting_file`.`merge_commit` = `refactoring_analysis`.`merge_commit`.`commit_hash`)) AS `has_java_conflict`,
        (SELECT 
                COUNT(DISTINCT `refactoring_analysis`.`merge_parent`.`id`)
            FROM
                ((`refactoring_analysis`.`conflicting_file_augmented`
                JOIN `refactoring_analysis`.`refactoring_commit`)
                JOIN `refactoring_analysis`.`merge_parent`)
            WHERE
                ((`conflicting_file_augmented`.`merge_commit` = `refactoring_analysis`.`merge_commit`.`commit_hash`)
                    AND (`refactoring_analysis`.`merge_parent`.`merge_commit` = `refactoring_analysis`.`merge_commit`.`commit_hash`)
                    AND (`refactoring_analysis`.`refactoring_commit`.`merge_parent` = `refactoring_analysis`.`merge_parent`.`id`)
                    AND ((`refactoring_analysis`.`refactoring_commit`.`source_class` LIKE CONCAT(`conflicting_file_augmented`.`class`,
                        '%'))
                    OR (`refactoring_analysis`.`refactoring_commit`.`destination_class` LIKE CONCAT(`conflicting_file_augmented`.`class`,
                        '%'))))) AS `parents_with_refactoring_in_java_conflict`,
        SUM(`merge_parent_refactoring`.`refactorings_count`) AS `refactorings_count`
    FROM
        ((`refactoring_analysis`.`merge_commit`
        LEFT JOIN `refactoring_analysis`.`merge_parent_refactoring` ON ((`refactoring_analysis`.`merge_commit`.`commit_hash` = `merge_parent_refactoring`.`merge_commit`)))
        LEFT JOIN `refactoring_analysis`.`project` ON ((`refactoring_analysis`.`merge_commit`.`project` = `refactoring_analysis`.`project`.`id`)))
    GROUP BY `refactoring_analysis`.`merge_commit`.`commit_hash`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`merge_parent_refactoring`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`merge_parent_refactoring`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`merge_parent_refactoring` AS
    SELECT 
        `refactoring_analysis`.`merge_parent`.`id` AS `merge_parent_id`,
        `refactoring_analysis`.`merge_parent`.`merge_commit` AS `merge_commit`,
        SUM(IF((`refactoring_analysis`.`refactoring_commit`.`id` IS NOT NULL),
            1,
            0)) AS `refactorings_count`
    FROM
        (`refactoring_analysis`.`merge_parent`
        LEFT JOIN `refactoring_analysis`.`refactoring_commit` ON ((`refactoring_analysis`.`merge_parent`.`id` = `refactoring_analysis`.`refactoring_commit`.`merge_parent`)))
    GROUP BY `refactoring_analysis`.`merge_parent`.`id`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`all_refactorings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`all_refactorings`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`all_refactorings` AS
    SELECT 
        `refactoring_analysis`.`project`.`name` AS `project_name`,
        `refactoring_analysis`.`project`.`url` AS `project_url`,
        `refactoring_analysis`.`merge_commit`.`commit_hash` AS `merge_commit_hash`,
        `refactoring_analysis`.`merge_parent`.`commit_hash` AS `merge_parent_hash`,
        `refactoring_analysis`.`refactoring_commit`.`commit_hash` AS `refactoring_commit_hash`,
        `refactoring_analysis`.`refactoring_commit`.`refactoring_type` AS `refactoring_type`,
        `refactoring_analysis`.`refactoring_commit`.`refactoring_detail` AS `refactoring_detail`
    FROM
        (((`refactoring_analysis`.`merge_commit`
        JOIN `refactoring_analysis`.`project` ON ((`refactoring_analysis`.`project`.`id` = `refactoring_analysis`.`merge_commit`.`project`)))
        JOIN `refactoring_analysis`.`merge_parent` ON ((`refactoring_analysis`.`merge_commit`.`commit_hash` = `refactoring_analysis`.`merge_parent`.`merge_commit`)))
        LEFT JOIN `refactoring_analysis`.`refactoring_commit` ON ((`refactoring_analysis`.`merge_parent`.`id` = `refactoring_analysis`.`refactoring_commit`.`merge_parent`)))
    ORDER BY `refactoring_analysis`.`project`.`name` , `refactoring_analysis`.`merge_commit`.`commit_hash` , `refactoring_analysis`.`merge_parent`.`id` , `refactoring_analysis`.`refactoring_commit`.`id` , `refactoring_analysis`.`refactoring_commit`.`refactoring_type`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`conflicting_file_augmented`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`conflicting_file_augmented`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`conflicting_file_augmented` AS
    SELECT 
        `refactoring_analysis`.`conflicting_file`.`id` AS `id`,
        `refactoring_analysis`.`conflicting_file`.`merge_commit` AS `merge_commit`,
        `refactoring_analysis`.`conflicting_file`.`type` AS `type`,
        `refactoring_analysis`.`conflicting_file`.`path` AS `path`,
        `refactoring_analysis`.`conflicting_file`.`package` AS `package`,
        CONCAT(`refactoring_analysis`.`conflicting_file`.`package`,
                '.',
                SUBSTR(`refactoring_analysis`.`conflicting_file`.`path`,
                    ((LENGTH(`refactoring_analysis`.`conflicting_file`.`path`) - LENGTH(SUBSTRING_INDEX(`refactoring_analysis`.`conflicting_file`.`path`,
                                    '/',
                                    -(1)))) + 1),
                    ((LENGTH(`refactoring_analysis`.`conflicting_file`.`path`) - ((LENGTH(`refactoring_analysis`.`conflicting_file`.`path`) - LENGTH(SUBSTRING_INDEX(`refactoring_analysis`.`conflicting_file`.`path`,
                                    '/',
                                    -(1)))) + 1)) - 4))) AS `class`
    FROM
        `refactoring_analysis`.`conflicting_file`;

-- -----------------------------------------------------
-- View `refactoring_analysis`.`project_stats`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_analysis`.`project_stats`;
USE `refactoring_analysis`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `refactoring_analysis`.`project_stats` AS
    SELECT 
        `refactoring_analysis`.`project`.`name` AS `name`,
        COUNT(0) AS `merge_commits`,
        SUM(IF((`merge_commit_augmented`.`refactorings_count` > 0),
            1,
            0)) AS `with_refactorings`,
        SUM(IF((`merge_commit_augmented`.`has_java_conflict` = 1),
            1,
            0)) AS `with_java_conflict`,
        SUM(IF((`merge_commit_augmented`.`parents_with_refactoring_in_java_conflict` > 0),
            1,
            0)) AS `with_refactorings_in_conflicting_files`,
        SUM(IF((`merge_commit_augmented`.`parents_with_refactoring_in_java_conflict` > 1),
            1,
            0)) AS `with_refactorings_in_both_parents_of_conflicting_files`
    FROM
        (`refactoring_analysis`.`merge_commit_augmented`
        JOIN `refactoring_analysis`.`project` ON ((`refactoring_analysis`.`project`.`id` = `merge_commit_augmented`.`project`)))
    GROUP BY `refactoring_analysis`.`project`.`id`
    ORDER BY `refactoring_analysis`.`project`.`name`;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
